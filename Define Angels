% Define the rotation matrix
R = [0   -0.8660  0.5; 
     0.5 -0.433   -0.75; 
     0.8660  0.25   0.433];

% ------------------ Euler Angles ------------------

euler_angles = rotm2eul(R, 'ZYX') * (180/pi); % Convert to degrees

% Display the result
disp('Euler angles (in degrees):');
disp(['  Yaw   (Z-axis) = ', num2str(euler_angles(1)), '°']);
disp(['  Pitch (Y-axis) = ', num2str(euler_angles(2)), '°']);
disp(['  Roll  (X-axis) = ', num2str(euler_angles(3)), '°']);

% ------------------ Axis-Angle Representation ------------------

% Rotation angle (theta)
angle = acos((trace(R) - 1) / 2);    % Rotation angle in radians

% Rotation axis (v)
if abs(angle) > 1e-6  % Avoid division by zero
    v = (1 / (2 * sin(angle))) * ...
        [R(3,2) - R(2,3);
         R(1,3) - R(3,1);
         R(2,1) - R(1,2)];
else
    v = [0; 0; 0];  % If angle is zero, axis is undefined
end

% Normalize the axis if valid
if norm(v) > 1e-6
    v = v / norm(v);
end

% Convert angle to degrees
angle_deg = rad2deg(angle);

% Display axis-angle representation
fprintf('\nAxis-Angle Representation:\n');
fprintf('  Axis        = [%.4f, %.4f, %.4f]\n', v(1), v(2), v(3));
fprintf('  Angle       = %.2f°\n\n', angle_deg);

% ------------------ Roll, Pitch, Yaw (ZYX) ------------------

% Redundant since Euler angles represent ZYX convention
roll_deg = euler_angles(3);
pitch_deg = euler_angles(2);
yaw_deg = euler_angles(1);

fprintf('Roll, Pitch, Yaw (ZYX):\n');
fprintf('  Roll  = %.2f°\n', roll_deg);
fprintf('  Pitch = %.2f°\n', pitch_deg);
fprintf('  Yaw   = %.2f°\n', yaw_deg);
